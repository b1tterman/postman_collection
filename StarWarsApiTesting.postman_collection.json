{
	"info": {
		"_postman_id": "75a7f44e-ca54-4951-be26-2bc7a083494f",
		"name": "StarWarsApiTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "new1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function() {",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"// 2.WE have all the declared fields in the response",
							"pm.test(\"Check theat we have all declared fields\", function(){",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});",
							"",
							"//3. Field value isnt NULL",
							"pm.test(\"Check if value isnt NULL\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"//4. Check if value isnt empty",
							"pm.test(\"Check if value isnt empty\", function() {",
							"     var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5. Check if field coeersponds to a specific value",
							"pm.test(\"Check if field coeersponds to a specific value\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//7. Status meaasage is OK",
							"pm.test(\"Status message is OK\", function() {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function() {",
							"    pm.response.to.have.header(\"Content-Type\")",
							"});",
							"",
							"//10. The response has a specific haeder with a specific value",
							"pm.test(\"The response has a specific haeder with a specific value\", function() {",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"//11. Cookie exists",
							"pm.test(\"Cookie exists\", function() {",
							"    pm.cookies.has(\"__cfduid\")",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function() {",
							"    try {",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    }  catch(e) {",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "new2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    //specify the type of object",
							"    \"type\" : \"object\",",
							"    //specify required properties",
							"    \"required\" : [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    //describe the properties",
							"    \"properties\" : {",
							"        \"people\" : {\"type\" : \"string\"},",
							"        \"planets\" : {\"type\" : \"string\"},",
							"        \"films\" : {\"type\" : \"string\"},",
							"        \"species\" : {\"type\" : \"string\"},",
							"        \"vehicles\" : {\"type\" : \"string\"},",
							"        \"starships\" : {\"type\" : \"string\"} ",
							"    }",
							"};",
							"",
							"pm.test(\"Body is correct\", function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "new3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"type\" : \"object\",",
							"    \"required\" : [\"name\",\"homeworld\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    \"property\" : {",
							"        \"name\" : {\"type\":\"string\"},",
							"        \"homeworld\" : {\"type\":\"string\"},",
							"        \"films\" : {",
							"            \"type\" : \"array\", ",
							"            \"items\" : {\"type\":\"string\"}",
							"        },",
							"        \"species\" : {",
							"            \"type\" : \"array\",",
							"            \"items\" : {\"type\":\"string\"}",
							"        },",
							"        \"vehicles\" : {",
							"            \"type\" : \"array\",",
							"            \"items\" : {\"type\":\"string\"}",
							"        },",
							"        \"starships\" : {",
							"            \"type\" : \"array\",",
							"            \"items\" : {\"type\":\"string\"}",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Body is correct\", function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Mar 2021 10:22:33 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=886242bb71402d56"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=97f0e40298ecb9de"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1616495013"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success.\",\n        \"header\": \"You need an example\"\n    }\n}"
				},
				{
					"name": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Tsar\"}"
						},
						"url": {
							"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Mar 2021 10:24:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=886242bb71402d56"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=97f0e40298ecb9de"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1616495013"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Tsar\",\n        \"status\" : \"Created\",\n        \"message\": \"success.\"\n       \n    }\n}"
				}
			]
		},
		{
			"name": "mock action",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Tsar\"}"
				},
				"url": {
					"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Mar 2021 10:22:33 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=886242bb71402d56"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=97f0e40298ecb9de"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1616495013"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success.\",\n        \"header\": \"You need an example\"\n    }\n}"
				},
				{
					"name": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Tsar\"}"
						},
						"url": {
							"raw": "https://1304484f-ac94-4ebb-88e4-ff16b9e855f6.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"1304484f-ac94-4ebb-88e4-ff16b9e855f6",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Mar 2021 10:24:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=886242bb71402d56"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=97f0e40298ecb9de"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1616495013"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Tsar\",\n        \"status\" : \"Created\",\n        \"message\": \"success.\"\n       \n    }\n}"
				}
			]
		}
	]
}